# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License.

# This file defines an Azure Pipelines build, which you can configure on https://dev.azure.com
# to run automatically with each Pull Request update and/or each commit to your repository.
# In this example, we do not change the default "trigger" behavior, so this build gets run
# for all commits/PRs to all branches of the axe-pipelines-samples repository.
#
# If you already have an Azure Pipelines build for your project, we recommend integrating
# your new accessibility tests into it, rather than creating a separate pipeline. Pipelines
# builds are usually defined in files like this one named "azure-pipelines.yml" or "build.yaml",
# but some projects use different file names.
#
# If you are using an Azure Pipelines build with tasks configured using the GUI on https://dev.azure.com,
# instead of a checked in YAML file, you can add the same tasks listed below from the GUI. However, we
# strongly recommend switching to using a checked in YAML file.
#
# Most TypeScript projects with an Azure Pipelines build will already have most of the steps
# shown below, with the exception of the final "PublishBuildArtifact" task; you'll probably
# have to add that.
#
# If you *don't* already have an Azure Pipelines build, we recommend following Azure Pipelines'
# documentation at https://docs.microsoft.com/en-us/azure/devops/pipelines/create-first-pipeline
# (using this sample as your starter code).
#
# For more information, see:
# * https://docs.microsoft.com/en-us/azure/devops/pipelines/get-started
# * https://docs.microsoft.com/en-us/azure/devops/pipelines/customize-pipeline

# The browser automation tool we're using, Selenium, works with many different browsers. Here, we show
# an example of using the same test code with different combinations of browsers and OSes.
#
# For more information, see:
# * https://docs.microsoft.com/en-us/azure/devops/pipelines/get-started-multiplatform
parameters:
- name: strategy
  type: object
  default:
  - name: win_chrome
    imageName: windows-2022-secure
    browser: chrome
    os: windows
  - name: linux_firefox
    imageName: ubuntu-22.04-secure
    browser: firefox
    os: linux

# The `resources` specify the location and version of the 1ES PT.
resources:
  repositories:
  - repository: 1esPipelines
    type: git
    name: 1ESPipelineTemplates/1ESPipelineTemplates
    ref: refs/tags/release

extends:
  template: v1/1ES.Unofficial.PipelineTemplate.yml@1esPipelines
  parameters:
    pool:
      name: $(a11yInsightsPool)  # Name of your hosted pool
      image: windows-2022-secure  # Name of the image in your pool. If not specified, first image of the pool is used
      os: windows  # OS of the image. Allowed values: windows, linux, macOS

    stages:
    - stage: Stage
      jobs:
      - ${{ each item in parameters.strategy }}:
        - job: Job_${{ item.name }}
          pool:
            name: $(a11yInsightsPool)
            image: ${{ item.imageName }}
            os: ${{ item.os }}
            
          variables:
          # This will be sent to the build agent as an environment variable which our test code will be able to see.
          # We'll use this environment variable in webdriver-factory.ts to determine which browser the tests will use.
            SELENIUM_BROWSER: ${{ item.browser }}

          templateContext:
            # If you are adding tests to an existing project that already uses Azure Pipelines, this is probably the only
            # new task you'll need to add.
            #
            # This task is how the "Scans" tab in our Azure Pipelines build results page gets its data. It requires using
            # PublishBuildArtifacts rather than the newer PublishPipelineArtifacts.
            outputs:
            # The exact name "CodeAnalysisLogs" is required for the Sarif Results Viewer Extension for Azure Pipelines
            # to find the .sarif files our accessibility test produces.
            - output: buildArtifacts
              displayName: publish sarif results
              # "test-results" is not a required convention; it just happens to be where our tests write .sarif files to.
              PathtoPublish: $(Build.SourcesDirectory)/typescript-selenium-webdriver-sample/test-results
              ArtifactName: CodeAnalysisLogs
              condition: succeededOrFailed()
        
          steps:
          # This task makes sure Node.js is installed on the build agent.
          #
          # It is a good idea to test against a specific, known version of Node; this makes it easier for other users
          # to reproduce your build results.
          - task: NodeTool@0
            displayName: install node 20.8.1
            inputs:
              versionSpec: "20.8.1"

            # This task installs dependencies specified in your package.json file.
            #
            # Our sample uses Yarn for this, but if your project uses NPM instead, that's also fine.
          - script: yarn install --frozen-lockfile # or "npm install --ci"
            displayName: yarn install
            # workingDirectory should match where your package.json file is located. It defaults to the root of the repository.
            workingDirectory: $(Build.SourcesDirectory)/typescript-selenium-webdriver-sample

            # This task runs the tests specified by jest.config.js, including our example accessibility tests.
            #
            # If your project already uses npm instead of yarn, or if your project already runs "jest" directly here,
            # those are both fine.
            #
            # The 2>&1 is a workaround for facebook/jest#5064
          - script: yarn test --ci 2>&1 # or "npm run test -- --ci 2>&1"
            displayName: yarn test
            workingDirectory: $(Build.SourcesDirectory)/typescript-selenium-webdriver-sample

            # This task is how the "Tests" tab in our Azure Pipelines build results page gets its data
          - task: PublishTestResults@2
            displayName: publish test results
            inputs:
              testResultsFiles: $(Build.SourcesDirectory)/typescript-selenium-webdriver-sample/test-results/junit.xml
              testRunTitle: typescript-selenium-webdriver-sample (${{ item.imageName }} ${{ item.browser }})
            condition: succeededOrFailed()
